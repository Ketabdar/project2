Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String  
     
    CidrIp:
        Description: IP address range for allowing the traffic in or out
        Type: String  
        
    IpProtocol:
        Description: IP protocol name
        Type: String     

Resources:
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: !Sub "${IpProtocol}"
        FromPort: 80
        ToPort: 80
        CidrIp: !Sub "${CidrIp}"
      SecurityGroupEgress:
      - IpProtocol: !Sub "${IpProtocol}"
        FromPort: 80
        ToPort: 80
        CidrIp: !Sub "${CidrIp}"
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: !Sub "${IpProtocol}"
        FromPort: 80
        ToPort: 80
        CidrIp: !Sub "${CidrIp}"
      - IpProtocol: !Sub "${IpProtocol}"
        FromPort: 22
        ToPort: 22
        CidrIp: !Sub "${CidrIp}"
      SecurityGroupEgress:
      - IpProtocol: !Sub "${IpProtocol}"
        FromPort: 0
        ToPort: 65535
        CidrIp: !Sub "${CidrIp}"
        
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-pr2/udacity.zip .
          unzip -o udacity.zip
      ImageId: ami-084f81625fbc98fa4
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: t3a.medium
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '4'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP
  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 20
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80 # to port 80
      Protocol: HTTP
      Tags: 
        - Key: name
          Value: !Sub ${EnvironmentName}-ALBTargetGrp
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

Outputs:
  PubUrlLoadBalancer: 
      Description: public url of the load balancer
      Value: !Join [ "", [ "http://", !GetAtt WebAppLB.DNSName ] ]
      Export:
        Name: !Sub ${EnvironmentName}-PUB-URL-LB
